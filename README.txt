**PROJECT TITLE: FA2RE-SE
**GROUP: 1FA2RE-SE
(Names, numbers, self assessment, and contribution of the members of the group according to:)
NAME: André Lago, NR: <number>, GRADE1: 20, CONTRIBUTION: 35%
NAME: Carolina Moreira, NR: <number>, GRADE: <0 to 20 value>, CONTRIBUTION: 10%
NAME: Gustavo Silva, NR: 201304143, GRADE2: 20, CONTRIBUTION: 35%
NAME: Leonardo Ferreira, NR: 201305980, GRADE: 15, CONTRIBUTION: 20%
(Note: consider that the sum of the individual contributions of the members should not exceed 100%)


** SUMMARY: (Describe what your tool does and its main features.)
Framework to transform finite automata to regular expressions using the state elimination method. The main feature of this interface is the possibility to specify how states must be "ranked" when selecting which one should be removed at each stage.
The input of the framework is a graph representing the automata and a DSL defining the order of elimination of the states, which will affect the final regular expression.
The graph should be in DOT format and it must contain a node with ID "START" (the start state) and it must contain one or more final states. A state is considered final if it has "doublecircle" as the shape or 2 peripheries.
To specify the order in which to eliminate the states, the user must specify an expression (using our DSL) indicating how the "score" of each node is going to be calculated. The nodes will then be removed in decreasing order of "score". In addition to that, the user may also specify tie breakers or even a manual ordering by specifying the node IDs directly.


**DEALING WITH SYNTACTIC ERRORS: (Describe how the syntactic error recovery of your tool does work. Does it exit after the first error?)
Syntatic analysis is performed when our program visits the ANTLR4 CST to build our custom AST. This analysis doesn't stop at the first error, it simply adds a error message to a list of errors, displayed at the end.

**SEMANTIC ANALYSIS: (Refer the possible semantic rules implemented by your tool.)
Semantic analysis is performed when the AST of the program is evaluated. The semantic validation includes checking wether variables were declared (for example, inside loops) and wether sub-variables (such as "weight" in "in.weight") are valid.

**INTERMEDIATE REPRESENTATIONS (IRs): (for example, when applicable, describe the HLIR (high-level IR) and the LLIR (low-level IR) used, if your tool includes an LLIR with structure different from the HLIR)
The tool generates an Abstract Syntax Tree from the Concrete Syntax Tree generated by ANTLR4. The purpose of the AST is to simplify the processing of the specified language, so that node ranking can be easily calculated.
Also, the functions called when walking through the ANTLR4 CST allow to implement some early semantic analysis.

**OVERVIEW: (refer the approach used in your tool, the main algorithms, the third-party tools and/or packages, etc.)
The framework runs on a web browser, using JavaScript to do the conversion between the FA and the regular expression.
The lexical and syntatic analysis is done using ANTLR4.

**TESTSUITE AND TEST INFRASTRUCTURE: (Describe the content of your testsuite regarding the number of examples, the approach to automate the test, etc.)


**TASK DISTRIBUTION: (Identify the set of tasks done by each member of the project.)
André Lago:
- Conversion of the CST to the AST.
- Calculation of the state order for an iteration using the rules defined in the AST.

Carolina Moreira:
- About page

Gustavo Silva:
- DOT file parsing (using vis.js)
- FA validation
- State elimination algorithm

Leonardo Ferreira:
- Output visualization (HTML, CSS and Javascript)
- Vis.js integration 


**PROS: (Identify the most positive aspects of your tool)
- Allows a lot of freedom in the specification of the ordering. Instead of allowing the user to choose from some heuristics, our DSL allows the specification of a "score" for each state, therefore giving the user much more freedom in the definition of the order in which to eliminate the states.
- User-friendly display of errors in the graphical interface. The errors are shown inline (underlined) and in a separate error message.

**CONS: (Identify the most negative aspects of your tool)